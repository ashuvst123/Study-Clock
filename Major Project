/*
 ###  simplest ever Arduino UNO digital clock  ###

 This clock needs only a 1602 LCD 2X16 and 2 push buttons 

 No Potentiometer for contrast, no resistors for pull-up or backlight !!!!

 * The simplest clock ever made with a Arduino UNO *    

 Button Functions:
 
 - short stroke on one of the buttons put Backlight on for 30 s
 
 Time settings
 - Press on H increments the Hours
 - Press on M increments the Minutes and resets the seconds
*/


//#include "LiquidCrystal.h"

#include <Wire.h> // Library for I2C communication
#include <LiquidCrystal_I2C.h> // Library for LCD



// This defines the LCD wiring to the DIGITALpins
//const int rs = 2, en = 3, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
//LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// Digital LCD Constrast setting
//int cs=9;// pin 9 for contrast PWM
//const int contrast = 100;// default contrast

// initial Time display is 12:59:45 PM
int h1=4;
int m1=24;
int s1=0;
int h2=0;
int m2=0;
int s2=0;
int flag=1; //PM
int st=5;//study time display
int mh=0;
int l1=28;
int l2=30;
int l3=31;
int l4=32;
int l5=33;
int l6=34;
int l7=35;
int b=29;
int tm=0;
int ts=0;
int th=0;
// Time Set Buttons
int button1;
int button2;
const int trigPin = 50;
const int echoPin = 51;
// defines variables
long duration;
int distance;
// Pins definition for Time Set Buttons
int hs=1;// pin 0 for Hours Setting
int ms=0;// pin 1 for Minutes Setting
int mb=48;

int motor1Pin1 = 24;
int motor1Pin2 = 25;
int motor2Pin1 = 26;
int motor2Pin2 = 27;

int bl=10; // Backlight pin
const int backlight=120;// no more then 7mA !!!
LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x27, 16, 2); 
// For accurate Time reading, use Arduino Real Time Clock and not just delay()
static uint32_t last_time, now = 0;// RTC


void setup()
{
  
  lcd.init();
  lcd.backlight();
  lcd.begin(16,2);
  pinMode(l1,OUTPUT);
  pinMode(l2,OUTPUT);
  pinMode(l3,OUTPUT);
  pinMode(l4,OUTPUT);
  pinMode(l5,OUTPUT);
  pinMode(l6,OUTPUT);
  pinMode(l7,OUTPUT);
  pinMode(b,OUTPUT);
  pinMode(hs,INPUT_PULLUP);// avoid external Pullup resistors for Button 1
  pinMode(ms,INPUT_PULLUP);// and Button 2
  pinMode(mb,INPUT_PULLUP);
 // analogWrite(cs,contrast);// Adjust Contrast VO
  analogWrite(bl,backlight);// Turn on Backlight
  now=millis(); // read RTC initial value
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication  
}


void loop()
{ 
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delay(1);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delay(20);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2;
  // Prints the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.println(distance);

  lcd.begin(16,2);// every second
// Update LCD Display
// Print TIME in Hour, Min, Sec + AM/PM
if(st==6)
{
 lcd.setCursor(5,0);
 lcd.print("Clock ");
 lcd.setCursor(2,1);// for Line 2
 if(h1<10)lcd.print("0");// always 2 digits
 lcd.print(h1);
 lcd.print(":");
 if(m1<10)lcd.print("0");
 lcd.print(m1);
 lcd.print(":");
 if(s1<10)lcd.print("0");
 lcd.print(s1);

 if(flag==0) lcd.print("AM");
 if(flag==1) lcd.print("PM");
 

}
if(st==0)
{
 lcd.setCursor(0,0);
 lcd.print("Clock ");
 if(h1<10)lcd.print("0");// always 2 digits
 lcd.print(h1);
 lcd.print(":");
 if(m1<10)lcd.print("0");
 lcd.print(m1);
 lcd.print(":");
 if(s1<10)lcd.print("0");
 lcd.print(s1);
 if(flag==0) lcd.print("AM");
 if(flag==1) lcd.print("PM");

 lcd.setCursor(0,1);// for Line 2
 lcd.print("ST Time");
 if(h2<10)lcd.print("0");// always 2 digits
 lcd.print(h2);
 lcd.print(":");
 if(m2<10)lcd.print("0");
 lcd.print(m2);
 lcd.print(":");
 if(s2<10)lcd.print("0");
 lcd.print(s2);
 

}
if(st>0 & st<6)
{lcd.setCursor(0,0);
lcd.print("Total Study Time");
lcd.setCursor(0,1);
 if(th<10)lcd.print("0");// always 2 digits
 lcd.print(th);
 lcd.print(":");
 if(tm<10)lcd.print("0");
 lcd.print(tm);
 lcd.print(":");
 if(ts<10)lcd.print("0");
 lcd.print(ts);
}




// improved replacement of delay(1000) 
// Much better accuracy, no more dependant of loop execution time

for ( int i=0 ;i<5 ;i++)// make 5 time 200ms loop, for faster Button response
{

  while ((now-last_time)<200) //delay200ms
  { 
    now=millis();
  }
 // inner 200ms loop
 last_time=now; // prepare for next loop 
 
  // read Setting Buttons
 button1=digitalRead(hs);// Read Buttons
 button2=digitalRead(ms);
  if(button1==0){
   h1=h1+1;
  }

 if(button2==0){
  s1=0;
  m1=m1+1;
  }

/* ---- manage seconds, minutes, hours am/pm overflow ----*/
 if(s1==60){
  s1=0;
  m1=m1+1;
 }
 if(m1==60)
 {
  m1=0;
  h1=h1+1;
 }
 if(h1==13)
 {
  h1=2;
  flag=flag+1;
  if(flag==2)flag=0;
 }
if(distance>30)
{mh=0;
digitalWrite(l1,LOW);
digitalWrite(l2,LOW);
digitalWrite(l3,LOW);
digitalWrite(l4,LOW);
digitalWrite(l5,LOW);
digitalWrite(l6,LOW);
digitalWrite(l7,LOW);
digitalWrite(b,LOW);
}
if(distance<30)
{digitalWrite(l1,HIGH);
digitalWrite(l2,HIGH);
digitalWrite(l3,HIGH);
digitalWrite(l5,HIGH);
digitalWrite(l4,HIGH);
digitalWrite(l6,HIGH);
digitalWrite(l7,HIGH);
mh=mh+1;
}
if(mh>=30)
{digitalWrite(b,HIGH);
}
if(mh==0)
{digitalWrite(motor1Pin1,LOW);
digitalWrite(motor1Pin2,LOW);
digitalWrite(motor2Pin1,LOW);
digitalWrite(motor2Pin2,LOW);
}
if(mh>=80 & mh<=90)
  {digitalWrite(motor1Pin1,LOW);
digitalWrite(motor1Pin2,HIGH);
digitalWrite(motor2Pin1,HIGH);
digitalWrite(motor2Pin2,LOW);
}
if(mh<=91 | mh<=101)
{digitalWrite(motor1Pin1,HIGH);
digitalWrite(motor1Pin2,LOW);
digitalWrite(motor2Pin1,LOW);
digitalWrite(motor2Pin2,HIGH);
}

if(mh==102)
{mh=50;
}
if(st==6)
{
 if((button1==0)|(button2==0))// Update display if time set button pressed
 {
  // Update LCD Display
  // Print TIME in Hour, Min, Sec + AM/PM
  lcd.setCursor(5,0);
  lcd.print("Clock ");
  lcd.setCursor(2,1);// for Line 2
  if(h1<10)lcd.print("0");// always 2 digits
  lcd.print(h1);
  lcd.print(":");
  if(m1<10)lcd.print("0");
  lcd.print(m1);
  lcd.print(":");
  if(s1<10)lcd.print("0");
  lcd.print(s1);

  if(flag==0) lcd.print(" AM");
  if(flag==1) lcd.print(" PM");
 }

}
if(st==0)
{
 lcd.setCursor(0,0);
 lcd.print("Clock ");
 if(h1<10)lcd.print("0");// always 2 digits
 lcd.print(h1);
 lcd.print(":");
 if(m1<10)lcd.print("0");
 lcd.print(m1);
 lcd.print(":");
 if(s1<10)lcd.print("0");
 lcd.print(s1);
 if(flag==0) lcd.print("AM");
 if(flag==1) lcd.print("PM");

 lcd.setCursor(0,1);// for Line 2
 lcd.print("ST Time");
 if(h2<10)lcd.print("0");// always 2 digits
 lcd.print(h2);
 lcd.print(":");
 if(m2<10)lcd.print("0");
 lcd.print(m2);
 lcd.print(":");
 if(s2<10)lcd.print("0");
 lcd.print(s2);
 

}
if(st>0 & st<6)
{lcd.setCursor(0,0);
lcd.print("Total Study Time");
lcd.setCursor(0,1);
 if(th<10)lcd.print("0");// always 2 digits
 lcd.print(th);
 lcd.print(":");
 if(tm<10)lcd.print("0");
 lcd.print(tm);
 lcd.print(":");
 if(ts<10)lcd.print("0");
 lcd.print(ts);
}

}// end for
if(distance<80)
{st=0;
}
if(st!=0)
{h2=0;
m2=0;
s2=0;
}

if(distance>80 & st<6)
{st+=1;
}

s1=s1+1;
// outer 1000ms loop
 if(distance>30 & distance<80)
 {s2=s2+1;
 ts+=1;//increment sec. counting
 } 
 if(s2==60){
  s2=0;
  m2=m2+1;
 }
 if(m2==60)
 {
  m2=0;
  h2=h2+1;
 }
 if(ts==60){
  ts=0;
  tm=tm+1;
 }
 if(tm==60)
 {
  tm=0;
  th=th+1;
 }

 

// ---- manage seconds, minutes, hours am/pm overflow ----
 if(s1==60){
  s1=0;
  m1=m1+1;
 }
 if(m1==60)
 {
  m1=0;
  h1=h1+1;
 }
 if(h1==13)
 {
  h1=1;
  flag=flag+1;
  if(flag==2)flag=0;
 } 
 

 
// Loop end
}
